

***классы, объекты***

>>> class A(object):
...     x=1
...
>>> a=A()
>>> B=A
>>> b=B()
>>> a.x
1
>>> b.x
1

>>> class Legs(object):                          #методы класса 
...     count=4
...     def getlegs(self):
...         return self.count
...
>>> charlie=Legs()
>>> charlie.count
4
>>> charlie.getlegs()
4

>>> class A(object):                             #проверка принадлежности к классу и атрибуты
...     x=1
...
>>> a=A()
>>> type(a)
<class '__main__.A'>
>>> type(A)
<class 'type'>
>>> dir(a)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'x']
>>> dir(A)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'x']

>>> class A(object):                             #cделать свойство и метод почти скрытым
...     __x=1
...     def __priv(self):
...         print('приватный метод')
...
>>> a=A()
>>> a.__x
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'A' object has no attribute '__x'
>>> a.__priv()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'A' object has no attribute '__priv'. Did you mean: '_A__priv'?
>>> a._A__x
1
>>> a._A__priv()
приватный метод

>>> class CompexNumber(object):                  #класс с конструктором с параметрами
    def __init__(self,x,y):
        self.r=x
        self.i=y
>>> aa=CompexNumber(4,5)
>>> aa.i
5

>>> class ComlexNumber(object):                  #ограничение на свойства __slots__
    __slots__=(’r', 'i')
    def __init__(self,x,y):
        self.r=x
        self.i=y
>>> a=ComlexNumber(3,3)
>>> a.r
3
>>> a.z=5
Traceback(most recent call last):
File "<pyshell#54>", line 1, in <module>
a.zyu=5
AttributeError: 'ComlexNumber' object has no attribute 'zyu'

>>> class Legs(object):                          #класс с значением свойств по умолчанию 
...     def__init__(self,x=4):
...         self.count=x
...     def getLegs(self):
...         print(self.count)
...     def tramLegs(self):
...         self.count=self.count-2
...
>>> zay=Legs()
>>> zay.count
4
>>> zay.getLegs()
4
>>> zay.tramLegs()
>>> zay.getLegs()
2
>>> zay2=Legs(5)
>>> zay2.getLegs()
5

>>> class A(object):
...     def__init__(self):
...         self.x=10
...     def__del__(self):
...         print('удаление')
...
>>> a=A()
>>> a.x
10
>>> del a
удаление

>>> objlist=[Object(),Circle(),CircleWithPoint()]                                 #cписок (list) объектов
>>> objlist
[<__main__.Objectobject at 0x1018e97b8>, <__main__.Circleobject at 0x1018e97f0>, 
<__main__.CircleWithPointobject at 0x1018e9828>]
>>> for i in objlist:
... i.draw()
...
Object
Circle
Circle
Point

>>> objdict={'obj':Object(),'cir':Circle(),'cirpoint':CircleWithPoint()}          #cловарь классов
>>> for key,val in enumerate(objdict):
... objdict[val].draw()
...
Circle
Point
Circle
Object


***наследование***

>>> class A(object):
...     def isAorB(self):
...         return True
...     def who(self):
...         return 'parent'
...
>>> class B(A):
...     def who(self):
...         return 'child'
...
>>> a=A()
>>> b=B()
>>> a.who
<bound method A.who of <__main__.A object at 0x0000026AE4667730>>
>>> a.who()
'parent'
>>> b.who()
'child'
>>> b.isAorB()
True
>>> class B(A):                                  #обращение к прородителю напрямую
...     def __init__(self):
...         A.__init__(self)
...
>>> b=B()
>>> b.who()
'parent'

>>> class C(A):                                  #super, когда не помним родитиеля
...     def __init__(self):
...         super(C,self).__init__()
...
>>> c=C()
>>> c.who(), c.isAorB()
('parent', True)

>>> class A(object):                             #__dict__ новые свойства
...     x=5
...     def __init__(self):
...         before=4
...         after=2
...
>>> a=A()
>>> a.__dict__
{}
>>> a.x=5
>>> a.before=45
>>> a.__dict__
{'x': 5, 'before': 45}

>>> class A(object):                             #множественное наследование
...     x=7
...     y=5
...
>>> class B(object):
...     x=3
...     z=8
...
>>> class AB(A,B):
...     legs=4
...
>>> class BA(B,A):
...     legs=5
...
>>> ab=AB()
>>> ba=BA()
>>> ab.x, ab.y, ab.z, ab.legs
(7, 5, 8, 4)
>>> ba.x, ba.y, ba.z, ba.legs
(3, 5, 8, 5)

>> ba.__class__                                  #проверка принадлежности
<class '__main__.BA'>
>>> ba.__class__.__base__
<class '__main__.B'>
>>> ba.__class__.__bases__
(<class '__main__.B'>, <class '__main__.A'>)
>>> ZeroDivisionError.__base__                   #пройти по наследованию
<class 'ArithmeticError'>
>>> ZeroDivisionError.__bases__[0].__base__
<class 'Exception'>
>>> ZeroDivisionError.__bases__[0].__bases__[0].__base__
<class 'BaseException'>
>>> ZeroDivisionError.__bases__[0].__bases__[0].__bases__[0].__base__
<class 'object'>
>>> type(ba)
<class '__main__.BA'>
>>> isinstance(ba,BA)
True
>>> isinstance(ba,A)
True
>>> isinstance(ba,B)
True
>>> isinstance(ba,AB)
False

>>> class Object(object):                        #вызов метода суперкласса
...     def draw(self):
...         print ('Object')
...
>>> class Circle(object):
...     def draw(self):
...         print('Circle')
...
>>> class CircleWithPoint(Circle):
...     def draw(self):
...         super(CircleWithPoint,self).draw()
...         print('Point')
...
>>> c=CircleWithPoint()
>>> c.draw()
Circle
Point

>>> class C(object):                             #присвоение методов
...     count=1
...     def getcount(self):
...         return self.count
...
>>> c=C()
>>> cc=c.getcount
>>> cc
<bound method C.getcount of <__main__.C object at 0x0000019035F65F90>>
>>> cc()
1
>>> C.count=13
>>> cc()
13
>>> c.count=23
>>> cc()
23
>>> C.count=13
>>> cc()
23

>>> def a():                                     #класс внутри функции  
...    class A(object):
...        x=1
...    return A
...
>>> z=a()
>>> z.x
1

>>> class A(object):                             #сначала задействован init а потом класс вызван 
...     def__init__(self,x,y):                    #как функция с параметрами и задействован call
...         self.x=x+y
...     def__call__(self,x,y):
...         return x+y
...
>>> a=A(5,6)
>>> a.x
11
>>> a(4,5)
9

>>> class A(object):                             #__str__ __unicode__
...     def__str__(self):
...         return 'MyA'
...
>>> a=A()
>>> a
<__main__.Aobject at 0x102142940>
>>> str(a)
'MyA'

>>> class B(object):                             #представление класса
...     def__repr__(self):
...         return 'MyB'
...
>>> b=B()
>>> b
MyB

__name__    —имя класса                          #cвойства классов
__module__  —имя модуля
__dict__    —словарь атрибутов класса
__bases__   —кортеж базовых классов
__doc__     —строка документации

__dict__    —словарь атрибутов класса                         #методы и свойства экземпляров классов
__class__   —объект-класс, экземпляром которого объект
__init__    —конструктор
__del__     —деструктор
__cmp__     —вызывается для всех операций сравнения
__hash__    —возвращает хеш-значение объекта, равное 32-битному числу
__getattr__ —возвращает атрибут, недоступный обычным способом
__setattr__ —присваивает значение атрибуту
__delattr__ —удаляет атрибут
__call__    —срабатывает при вызове экземпляра класса

>>> type('D',(object,),{'a':'b'})                #создание класса «на лету» type 
<class '__main__.D'>
>>> d=type('D',(object,),{'a':'b'})
>>> d.a
'b’


***обработка исключений***

>>> alist=[]                                     #обработка исключений
>>> def alistread():
...     try:
...         alist.append(int(input()))
...     except ValueError:
...         print('can not convert')
...
>>> alistread()
17
>>> alist
[17]
>>> alistread()
hello
can not convert

>>> try:                                         #можно использовать наиболее общий класс Exception
...     a=1/0
... except Exception:
...     a=10
...
>>> print(a)
10

>>> try:                                         #можно использовать совсем общий случай
...     a=1/0
... except:
...     a=100
...
>>> print(a)
100

>>> class MyExcept(Exception):                   #пользовательское исключение
...     print('Ex')
...
Ex
>>> try:
...     raise MyExcept()
... except MyExcept:
...     print('hello')
...
hello

>>> def alistadd():                              #else и finally
...     try:
...         alist.append(int(input()))
...     except ValueError:
...         print('не int')
...     else:
...         print('Все ok')
...     finally:
...         print('i have do it')
...
>>> alistadd()
13
Все ok
i have do it
>>> alistadd()
hello
не int
i have do it

>>> x='a'                                        #несколько исключений
>>> try:
...     a=1/x
... except (ValueError, TypeError):
...     a=1
...
>>> a
1























