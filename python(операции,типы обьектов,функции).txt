
+                         #только для списков(не модернизирует равный массив)
+=, extend()              #для любого интегрируемого обьекта со списком (модернизирует равный массив)

a=a[::-1]                 #реверс кортежа/массива/строки
len(a)                    #длина структуры
a.count()                 #поиск кол-ва элементов
a.index()                 #поиск порядкового номера элемента
 in a                     #проверка есть ли элемент в структуре  

***Строки ' '***

a=str(a)                  #строки' ' из int
a=a.split()               #массив из строки по пробелам или элементам
a=' '.join(a)             #обратно, строка из массива
a=a.lower(), a=a.upper()  #перевод в строчные или прописные
a=a.strip()               #без параметров убирает пробелы с концов
a.find("")/a.rfind("")    #поиск вперед/назад
a=a.replace("", "")       #замена элементов строки 

>>> "hello%s %s" %("Friend","Vasya")         #формирование строк
'hello Friend Vasya'
>>> '{} student'.format(‘Vasya')
‘Vasya student'

'python'.isalpha()        #проверяет состоит ли строка из букв
'python'.isalnum()        #проверяет состоит ли строка из цифр или букв
'python'.islower()        #проверяет состоит ли строка из строчныхсимволов
'python'.isupper()        #проверяет состоит ли строка из заглавных символов
'123'.isdigit()           #проверка состоит ли строка из цифр

***кортежи ( )***

a=tuple(a)                #кортеж из строки по каждому знаку

>>> t1=(1,2,3)
>>> t2=(3,4,5)
>>> t3=t1+t2
>>> t3
(1, 2, 3, 3, 4, 5)
>>> (1,2,3,4)*2
(1, 2, 3, 4, 1, 2, 3, 4)


***списки/массивы [ ]***

a=list(a)                 #массив из строки по всем знакам
(без a=)                 
a=a.split()               #массив из строки по пробелам или элементам
a.append(),a.extend()     #добавление элементов в список c [] и без
a.insert( , )             #вставка элемента на заданную позицию
a.remove()                #удаление первого встреченого элемента                
a.pop() или del a[]       #удаление последнего прибавленного элемента или по индексу
a.reverse()               #реверс
list(reversed(a))                           #без изменения самого массива
a.sort()                  #сортировка
sorted(a)                                   #без изменения самого массива   
sum(a),max(a),min(a)      #подсчет минимума, максимума, суммы

a=range(10)               #автоматическая генерация списка             
>>> a
range(0, 10)
>>> a=list(a)
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> a1_str='1 2 3 4 5'                      #map-применение операций ко всем элементам списка
>>> a1_list=a1_str.split()
>>> a1_list
['1', '2', '3', '4', '5']
>>> a1_map=map(int, a1_list)
>>> a1_map
<map object at 0x10213a9e8>
>>> a1_map=list(a1_map)
>>> a1_map
[1, 2, 3, 4, 5]

>>> a
[0, 34, 1, 2, 3]
>>> for index in enumerate(a):
...     print(index)
...
(0, 0)
(1, 34)
(2, 1)
(3, 2)
(4, 3)
>>> for i, num in enumerate(a):
...     print(i,num)
...
0 0
1 34
2 1
3 2
4 3


***словари { }*** 

x.update({'d':4})         #добавление элементов
a=dict([('a',5)])         #словарь{} из массива

a=set(a)                  #неповторяемый набор без ключей,{}
a3=a1.union(a2)           #обьединение сетов
a4=a1.intersection(a2)    #пересечение сетов

>>>a_set=set('hello word python')
>>>a_set
{' ', 'p', 'r', 'd', 'w', 'o', 'n', 'h', 'e', 't', 'l', 'y'}
>>> a_set.add('a')
>>> a_set
{' ', 'p', 'r', 'd', 'w', 'o', 'n', 'h', 'e', 't', 'a', 'l', 'y'}
>>> a_set.add('r')
>>> a_set
{' ', 'p', 'r', 'd', 'w', 'o', 'n', 'h', 'e', 't', 'a', 'l', 'y'}

x.items()                                     #получение массива кортежей
dict_items([('b', 2), ('a', 1), ('c', 3)])
>>> x.keys()                                  #получение ключей и значений
dict_keys(['b', 'a', 'c'])                    
>>> x.values()
dict_values([2, 1, 3])                        

>>> x2=frozenset([1,2,1,3,1])                 #замороженные множества
>>> x2
frozenset({1, 2, 3})  

for key, values in x.items():
...    print(key, values)
...    
b 2                        
a 1
c 3

 
***управляющие конструкции*** 

>>> if 10 in a:
... print(10)
... elif 9 in a:
... print(9)
... else:
... print('пусто')
...
9

>>> if 5>3:                     #pass – не делать ничего
... pass

>>> aa=10 if 99 in a else 9     #короткое использование(обязательно else)
>>> aa
9
 
>>> import random               #random
>>> random.randint(0,10)
7
>>> random.randrange(0,10,5)    #начальное,конечное, шаг
0
>>> random.random()
0.8815129820148103
>>> random.choice('asdddff')
'd’
>>> ar=list(range(10))
>>> ar
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> random.shuffle(ar)
>>> print(ar)
[1, 3, 0, 8, 7, 4, 2, 9, 6, 5]
>>> random.seed()               #устанавливает начальное значение для генерации(повторяющаяся псевдослучайность)

>>> i=1                         #while и break
>>> while i<=3:
...     print(i)
...     i+=1
...
1
2
3

>>> while True:                 
... i+=1
... if i>100:
... break                       #прервать выполнение цикла
...
>>> i
101

>>> a=[i**2 for i in range(10)]                    #cоздание списков через встроенный генератор и for
>>> a2=[i**2 for i in range(10) if i%2==1]         #из квадратов нечетных значений
>>> a3=[i**2 for i in range(10) if i%2==0]         #аналогично из четных
>>>a=[[j for j in range(3)] for i in range(10)]    #cоздание вложенных списков
>>>a
[[0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2], [0, 1, 2],[0, 1, 2], [0, 1, 2]]
>>> x4={i:i**2 for i in range(10)}
>>> x4
{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}


***функции***

>>> def f1(a,b):                #разные стили написания функций
...    return a+b
>>> def f2(a,b):
...    print(a+b)
>>> def f3(a,b):
...    global summ
...    summ=a+b
...    print(summ)

>>>a=summa([1],[2])             #вызов функции с присвоением значения
>>>a
[1, 2]
>>>a=summa('a','b')
>>>a
'ab'

>>> a=[f(i) for i in a]         #варианты
>>> a=list(map(f,a))

>>> a=[1,3,5]                   #использование map с пользовательской функцией
>>> b=[2,4,6]
>>> def f(x,y):
...     return x*y
...
>>> c=list(map(f,a,b))
>>> c
[2, 12, 30]

>>> def f1(x,y,z=1):            #функции с параметром по умолчанию
... return (x+y)**z
...
>>> f1(5,3)
8
>>> f1(5,3,2)
64

>>> def f1(x):                  #функции с произвольным числом индексируемых параметров
... return x**2
...
>>> def f2(*args):
... return list(map(f1,args))
>>> f2(2,3,4,4)
[4, 9, 16, 16]
>>> a=[1,2,3,4]
>>> f2(*a)
[1, 4, 9, 16]

>>> def f4(*args):                             #вывод элементов массива с индексами
... for i,arg in enumerate(args):
... print(i,arg)
...
>>> f4(*a)
0 1
1 2
2 3
3 4

>>> def f5(**kwargs):                           #вывод элементов словаря
... for i, val in enumerate(kwargs.items()):
... print(i,val)
...
>>> f5(a='aa',b='bb',c='cc')
0 ('c', 'cc')
1 ('b', 'bb')
2 ('a', 'aa')

>>>def f(*args,**kwargs):                       #всеядная функция
... print('args',args)
... print('kwargs',kwargs)
...
>>>f(1,2,3,4,a=5,b=10)
args(1, 2, 3, 4)
kwargs{'a': 5, 'b': 10}
>>> f(*(1,2,3),**{'a':1,'b':2})                 #передача словарей и кортежей
args(1, 2, 3)
kwargs{'a': 1, 'b': 2}

>>> def plus(x,y):                              #массив и словарь функций
... return x+y
...
>>> def minus(x,y):
... return x-y
...
>>> adef1=[plus, minus]
>>> adef1[0](1,2)
3
>>> adef2={'+':plus,'-':minus}
>>> adef2['+'](1,2)
3

>>> def func(x,y):                #вложенные функции
...     def plus(x,y):
...         return x+y
...     def minus(x,y):
...         return x-y
...     if x>y:
...         return minus(x,y)
...     else:
...         return plus(x,y)
...
>>> func(5,6)
11
>>> func(5,1)
4


***lambda функции***

>>> def f1(x,y):
... return x+y
...
>>> f1(5,6)
11
>>> f2=lambda x,y:x+y
>>> f2(5,6)
11
>>> a=list(map(lambda x: x*x,a))
>>> a
[1, 4]
>>> y1=lambda x: x*x
>>> y1(2)
4
>>> (lambda x: x*x)(2)              #можно не присваивая переменную      
4

>>> f3=(lambda a=5,b=7:a+b)        #lambda со значениями по умолчанию
>>> f3()
12
>>> f3(1,2)
3

>>> a=[lambda x: x**0,lambda x:x**1,lambda x:x**2]   #cписок lambda
>>> for i in a:
... print(i(2))
...
1
2
4
>>> a[1](3)
3
>>> b={'0':lambda x:x**0,'1':lambda x:x*81}          #cловарь lambda
>>> b['0'](5)
1

>>> c=(lambda x,y: x if x<y else y)                  #логика внутри lambda
>>> c(5,6)
5
>>> c('aa','ab')
'aa'

>>> def summ(x,y):                                   #каррированная функция
...     return x+y                                     Каррирование или карринг (currying) в
...                                                     функциональном программирование —  
>>>summ_car=lambda x:lambda y:summ(x,y)                 это преобразование функции с множеством  
>>>summ_car(3)(4)                                       аргументов в набор вложенных функций с 
7                                                       одним аргументом.

>>>yyy=lambda a,b: zip(a,b)        #zip
>>> a=[1,2,3]
>>> b=[4,5,6]
>>>yyy(a,b)
<zipobjectat 0x1021e1108>
>>>list(yyy(a,b))
[(1, 4), (2, 5), (3, 6)]
>>> y2=lambda a,b:list(zip(a,b))
>>> y2((1,2,3),(11,12,13))
[(1, 11), (2, 12), (3, 13)]
>>> y3=lambda a,b:dict(zip(a,b))
>>> y3((1,2,3),(11,12,13))
{1: 11, 2: 12, 3: 13}
>>> a=[1,2]
>>> b=[11,12]
>>> v=[111,112]
>>> print(list(zip(a,b,v)))
[(1, 11, 111), (2, 12, 112)]
>>> alist=[a,b,v]
>>> print(list(zip(*alist)))
[(1, 11, 111), (2, 12, 112)]

>>> def h1():                       #помощь при работе с функциями
... '''hello Python'''
... print('hello')
...
>>> h1()
hello
>>> h1.__doc__
'hello Python'

>>> def f8():                       #глобальные переменные
... global val
... val +=1
...
>>> val=0
>>> f8()
>>> val
1
>>> f8()
>>> val
2

>>> a=[0,1,2,3,4]                                     #filter
>>> print(filter(lambda x: x%2==0,a))
<filter object at 0x10223b630>
>>> print(list(filter(lambda x: x%2==0,a)))
[0, 2, 4]

>>> print(map(lambda x: x*2==0,a))                    #map
<map object at 0x10223b630>
>>> print(list(map(lambda x: x*2==0,a)))
[True, False, False, False, False]
>>> print(list(map(lambda x: x*2,a)))
[0, 2, 4, 6, 8]

>>> from functools import reduce                      #reduce
>>> a=[0,1,2]
>>> a1=reduce(lambda x,y:x+y,a)
>>> a1
3
>>> a1=reduce(lambda x,y:x*y,a)
>>> a1
0










